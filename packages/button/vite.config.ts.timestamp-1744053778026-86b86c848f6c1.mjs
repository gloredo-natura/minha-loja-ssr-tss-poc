// vite.config.ts
import { resolve } from "path";
import { defineConfig } from "file:///Users/gloredo/Documents/GitHub/minha-loja-ssr-tss-poc/node_modules/.pnpm/vite@5.4.17_@types+node@20.17.30/node_modules/vite/dist/node/index.js";
import react from "file:///Users/gloredo/Documents/GitHub/minha-loja-ssr-tss-poc/node_modules/.pnpm/@vitejs+plugin-react@4.3.4_vite@5.4.17_@types+node@20.17.30_/node_modules/@vitejs/plugin-react/dist/index.mjs";
import dts from "file:///Users/gloredo/Documents/GitHub/minha-loja-ssr-tss-poc/node_modules/.pnpm/vite-plugin-dts@3.9.1_@types+node@20.17.30_rollup@4.39.0_typescript@5.8.3_vite@5.4.17_@types+node@20.17.30_/node_modules/vite-plugin-dts/dist/index.mjs";

// package.json
var peerDependencies = {
  "@naturacosmeticos/natds-icons": "^1.30.1",
  react: "^18.2.0",
  "react-dom": "^18.2.0"
};

// vite.config.ts
var __vite_injected_original_dirname = "/Users/gloredo/Documents/GitHub/minha-loja-ssr-tss-poc/packages/button";
var vite_config_default = defineConfig({
  plugins: [
    react(),
    // Processa JSX, etc.
    dts({
      // Gera arquivos .d.ts automaticamente
      insertTypesEntry: true
    })
  ],
  build: {
    sourcemap: true,
    // Recomendado para debug da lib
    // Configuração ESSENCIAL para modo biblioteca:
    lib: {
      entry: resolve(__vite_injected_original_dirname, "src/index.ts"),
      // Ponto de entrada da lib
      name: "MeuMonorepoButton",
      // Nome global para UMD
      formats: ["es", "umd"],
      // Formatos de saída
      fileName: (format) => `button.${format === "umd" ? "umd.cjs" : "js"}`
      // Nomenclatura dos arquivos
    },
    // Configuração ESSENCIAL para externalizar dependências:
    rollupOptions: {
      // Não empacota as peerDependencies (React, etc.)
      external: [...Object.keys(peerDependencies)],
      output: {
        // Mapeia as dependências externalizadas para globais no formato UMD
        globals: {
          react: "React",
          "react-dom": "ReactDOM"
          // Adicione outros peer deps aqui se tiver
        }
      }
    }
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiLCAicGFja2FnZS5qc29uIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiL1VzZXJzL2dsb3JlZG8vRG9jdW1lbnRzL0dpdEh1Yi9taW5oYS1sb2phLXNzci10c3MtcG9jL3BhY2thZ2VzL2J1dHRvblwiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9maWxlbmFtZSA9IFwiL1VzZXJzL2dsb3JlZG8vRG9jdW1lbnRzL0dpdEh1Yi9taW5oYS1sb2phLXNzci10c3MtcG9jL3BhY2thZ2VzL2J1dHRvbi92aXRlLmNvbmZpZy50c1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vVXNlcnMvZ2xvcmVkby9Eb2N1bWVudHMvR2l0SHViL21pbmhhLWxvamEtc3NyLXRzcy1wb2MvcGFja2FnZXMvYnV0dG9uL3ZpdGUuY29uZmlnLnRzXCI7Ly8gcGFja2FnZXMvYnV0dG9uL3ZpdGUuY29uZmlnLnRzXG5pbXBvcnQgeyByZXNvbHZlIH0gZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBkZWZpbmVDb25maWcgfSBmcm9tICd2aXRlJztcbmltcG9ydCByZWFjdCBmcm9tICdAdml0ZWpzL3BsdWdpbi1yZWFjdCc7XG5pbXBvcnQgZHRzIGZyb20gJ3ZpdGUtcGx1Z2luLWR0cyc7XG5pbXBvcnQgKiBhcyBwYWNrYWdlSnNvbiBmcm9tICcuL3BhY2thZ2UuanNvbic7IC8vIFBhcmEgbGVyIHBlZXJEZXBlbmRlbmNpZXNcblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29uZmlnKHtcbiAgcGx1Z2luczogW1xuICAgIHJlYWN0KCksIC8vIFByb2Nlc3NhIEpTWCwgZXRjLlxuICAgIGR0cyh7IC8vIEdlcmEgYXJxdWl2b3MgLmQudHMgYXV0b21hdGljYW1lbnRlXG4gICAgICBpbnNlcnRUeXBlc0VudHJ5OiB0cnVlLFxuICAgIH0pLFxuICBdLFxuICBidWlsZDoge1xuICAgIHNvdXJjZW1hcDogdHJ1ZSwgLy8gUmVjb21lbmRhZG8gcGFyYSBkZWJ1ZyBkYSBsaWJcbiAgICAvLyBDb25maWd1cmFcdTAwRTdcdTAwRTNvIEVTU0VOQ0lBTCBwYXJhIG1vZG8gYmlibGlvdGVjYTpcbiAgICBsaWI6IHtcbiAgICAgIGVudHJ5OiByZXNvbHZlKF9fZGlybmFtZSwgJ3NyYy9pbmRleC50cycpLCAvLyBQb250byBkZSBlbnRyYWRhIGRhIGxpYlxuICAgICAgbmFtZTogJ01ldU1vbm9yZXBvQnV0dG9uJywgLy8gTm9tZSBnbG9iYWwgcGFyYSBVTURcbiAgICAgIGZvcm1hdHM6IFsnZXMnLCAndW1kJ10sIC8vIEZvcm1hdG9zIGRlIHNhXHUwMEVEZGFcbiAgICAgIGZpbGVOYW1lOiAoZm9ybWF0KSA9PiBgYnV0dG9uLiR7Zm9ybWF0ID09PSAndW1kJyA/ICd1bWQuY2pzJyA6ICdqcyd9YCwgLy8gTm9tZW5jbGF0dXJhIGRvcyBhcnF1aXZvc1xuICAgIH0sXG4gICAgLy8gQ29uZmlndXJhXHUwMEU3XHUwMEUzbyBFU1NFTkNJQUwgcGFyYSBleHRlcm5hbGl6YXIgZGVwZW5kXHUwMEVBbmNpYXM6XG4gICAgcm9sbHVwT3B0aW9uczoge1xuICAgICAgLy8gTlx1MDBFM28gZW1wYWNvdGEgYXMgcGVlckRlcGVuZGVuY2llcyAoUmVhY3QsIGV0Yy4pXG4gICAgICBleHRlcm5hbDogWy4uLk9iamVjdC5rZXlzKHBhY2thZ2VKc29uLnBlZXJEZXBlbmRlbmNpZXMpXSxcbiAgICAgIG91dHB1dDoge1xuICAgICAgICAvLyBNYXBlaWEgYXMgZGVwZW5kXHUwMEVBbmNpYXMgZXh0ZXJuYWxpemFkYXMgcGFyYSBnbG9iYWlzIG5vIGZvcm1hdG8gVU1EXG4gICAgICAgIGdsb2JhbHM6IHtcbiAgICAgICAgICByZWFjdDogJ1JlYWN0JyxcbiAgICAgICAgICAncmVhY3QtZG9tJzogJ1JlYWN0RE9NJyxcbiAgICAgICAgICAvLyBBZGljaW9uZSBvdXRyb3MgcGVlciBkZXBzIGFxdWkgc2UgdGl2ZXJcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSxcbiAgfSxcbn0pOyIsICJ7XG4gIFwibmFtZVwiOiBcIkBtZXUtbW9ub3JlcG8vYnV0dG9uXCIsXG4gIFwidmVyc2lvblwiOiBcIjAuMS4wXCIsXG4gIFwicHJpdmF0ZVwiOiBmYWxzZSxcbiAgXCJkZXNjcmlwdGlvblwiOiBcIkNvbXBvbmVudGUgQnV0dG9uIHJldXRpbGl6XHUwMEUxdmVsXCIsXG4gIFwidHlwZVwiOiBcIm1vZHVsZVwiLFxuICBcInNvdXJjZVwiOiBcInNyYy9pbmRleC50c1wiLFxuICBcIm1haW5cIjogXCJkaXN0L2J1dHRvbi51bWQuY2pzXCIsXG4gIFwibW9kdWxlXCI6IFwiZGlzdC9idXR0b24uanNcIixcbiAgXCJ0eXBlc1wiOiBcImRpc3QvaW5kZXguZC50c1wiLFxuICBcImV4cG9ydHNcIjoge1xuICAgIFwiLlwiOiB7XG4gICAgICBcImltcG9ydFwiOiBcIi4vZGlzdC9idXR0b24uanNcIixcbiAgICAgIFwicmVxdWlyZVwiOiBcIi4vZGlzdC9idXR0b24udW1kLmNqc1wiLFxuICAgICAgXCJ0eXBlc1wiOiBcIi4vZGlzdC9pbmRleC5kLnRzXCJcbiAgICB9XG4gIH0sXG4gIFwiZmlsZXNcIjogW1xuICAgIFwiZGlzdFwiXG4gIF0sXG4gIFwic2NyaXB0c1wiOiB7XG4gICAgXCJidWlsZFwiOiBcInZpdGUgYnVpbGRcIixcbiAgICBcImRldlwiOiBcInZpdGUgYnVpbGQgLS13YXRjaFwiLFxuICAgIFwidHlwZWNoZWNrXCI6IFwidHNjIC0tbm9FbWl0XCJcbiAgfSxcbiAgXCJwZWVyRGVwZW5kZW5jaWVzXCI6IHtcbiAgICBcIkBuYXR1cmFjb3NtZXRpY29zL25hdGRzLWljb25zXCI6IFwiXjEuMzAuMVwiLFxuICAgIFwicmVhY3RcIjogXCJeMTguMi4wXCIsXG4gICAgXCJyZWFjdC1kb21cIjogXCJeMTguMi4wXCJcbiAgfSxcbiAgXCJkZXBlbmRlbmNpZXNcIjoge1xuICAgIFwiQGVtb3Rpb24vcmVhY3RcIjogXCJeMTEuMTQuMFwiLFxuICAgIFwiQG5hdHVyYWNvc21ldGljb3MvbmF0ZHMtdGhlbWVzXCI6IFwiXjAuODQuMVwiLFxuICAgIFwidHNzLXJlYWN0XCI6IFwiXjQuOS4xMFwiXG4gIH0sXG4gIFwiZGV2RGVwZW5kZW5jaWVzXCI6IHtcbiAgICBcIkBuYXR1cmFjb3NtZXRpY29zL25hdGRzLWljb25zXCI6IFwiXjEuMzAuMVwiLFxuICAgIFwiQHR5cGVzL25vZGVcIjogXCJeMjAuMTIuMTJcIixcbiAgICBcIkB0eXBlcy9yZWFjdFwiOiBcIl4xOC4zLjNcIixcbiAgICBcIkB0eXBlcy9yZWFjdC1kb21cIjogXCJeMTguMy4wXCIsXG4gICAgXCJAdml0ZWpzL3BsdWdpbi1yZWFjdFwiOiBcIl40LjMuMFwiLFxuICAgIFwicmVhY3RcIjogXCJeMTguMi4wXCIsXG4gICAgXCJyZWFjdC1kb21cIjogXCJeMTguMi4wXCIsXG4gICAgXCJ0eXBlc2NyaXB0XCI6IFwiXjUuNC41XCIsXG4gICAgXCJ2aXRlXCI6IFwiXjUuMi4xMlwiLFxuICAgIFwidml0ZS1wbHVnaW4tZHRzXCI6IFwiXjMuOS4xXCJcbiAgfSxcbiAgXCJrZXl3b3Jkc1wiOiBbXSxcbiAgXCJhdXRob3JcIjogXCJcIixcbiAgXCJsaWNlbnNlXCI6IFwiSVNDXCJcbn0iXSwKICAibWFwcGluZ3MiOiAiO0FBQ0EsU0FBUyxlQUFlO0FBQ3hCLFNBQVMsb0JBQW9CO0FBQzdCLE9BQU8sV0FBVztBQUNsQixPQUFPLFNBQVM7OztBQ3FCZCx1QkFBb0I7QUFBQSxFQUNsQixpQ0FBaUM7QUFBQSxFQUNqQyxPQUFTO0FBQUEsRUFDVCxhQUFhO0FBQ2Y7OztBRDdCRixJQUFNLG1DQUFtQztBQU96QyxJQUFPLHNCQUFRLGFBQWE7QUFBQSxFQUMxQixTQUFTO0FBQUEsSUFDUCxNQUFNO0FBQUE7QUFBQSxJQUNOLElBQUk7QUFBQTtBQUFBLE1BQ0Ysa0JBQWtCO0FBQUEsSUFDcEIsQ0FBQztBQUFBLEVBQ0g7QUFBQSxFQUNBLE9BQU87QUFBQSxJQUNMLFdBQVc7QUFBQTtBQUFBO0FBQUEsSUFFWCxLQUFLO0FBQUEsTUFDSCxPQUFPLFFBQVEsa0NBQVcsY0FBYztBQUFBO0FBQUEsTUFDeEMsTUFBTTtBQUFBO0FBQUEsTUFDTixTQUFTLENBQUMsTUFBTSxLQUFLO0FBQUE7QUFBQSxNQUNyQixVQUFVLENBQUMsV0FBVyxVQUFVLFdBQVcsUUFBUSxZQUFZLElBQUk7QUFBQTtBQUFBLElBQ3JFO0FBQUE7QUFBQSxJQUVBLGVBQWU7QUFBQTtBQUFBLE1BRWIsVUFBVSxDQUFDLEdBQUcsT0FBTyxLQUFpQixnQkFBZ0IsQ0FBQztBQUFBLE1BQ3ZELFFBQVE7QUFBQTtBQUFBLFFBRU4sU0FBUztBQUFBLFVBQ1AsT0FBTztBQUFBLFVBQ1AsYUFBYTtBQUFBO0FBQUEsUUFFZjtBQUFBLE1BQ0Y7QUFBQSxJQUNGO0FBQUEsRUFDRjtBQUNGLENBQUM7IiwKICAibmFtZXMiOiBbXQp9Cg==
